name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: simple-bank-be

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests
      run: mvn clean test

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: target/surefire-reports/

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: target/site/jacoco/

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    environment: dev
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ vars.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    environment: dev
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Update image configuration with Docker username
      run: |
        # Update the image-config.yaml with the DOCKER_USERNAME from environment
        sed -i "s/DOCKER_USERNAME: \".*\"/DOCKER_USERNAME: \"${{ env.DOCKER_USERNAME }}\"/" k8s/image-config.yaml
        echo "Updated image-config.yaml with DOCKER_USERNAME: ${{ env.DOCKER_USERNAME }}"
        cat k8s/image-config.yaml

    - name: Configure kubectl
      run: |
        echo "=== Decoding and validating kubeconfig ==="
        
        # Check if KUBECONFIG secret exists
        if [ -z "${{ secrets.KUBECONFIG }}" ]; then
          echo "‚ùå KUBECONFIG secret is not set in GitHub repository secrets"
          echo "Please add the base64 encoded kubeconfig as a secret named 'KUBECONFIG'"
          exit 1
        fi
        
        # Decode kubeconfig with error handling
        if ! echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig 2>/dev/null; then
          echo "‚ùå Failed to decode base64 kubeconfig"
          echo "Please ensure the KUBECONFIG secret contains valid base64 encoded data"
          exit 1
        fi
        
        # Validate kubeconfig format
        if ! head -1 kubeconfig | grep -q "apiVersion:"; then
          echo "‚ùå Invalid kubeconfig format - missing apiVersion"
          echo "Kubeconfig content (first 5 lines):"
          head -5 kubeconfig
          exit 1
        fi
        
        export KUBECONFIG=kubeconfig
        echo "‚úÖ Kubeconfig decoded and validated successfully"
        
        echo "=== Kubeconfig Info ==="
        kubectl config current-context || echo "Failed to get current context"
        kubectl config view --minify --flatten || echo "Failed to view config"
        
        echo "=== Testing cluster connectivity ==="
        kubectl cluster-info --request-timeout=30s || echo "Cluster info failed"
        kubectl get nodes --request-timeout=30s || echo "Get nodes failed"
        
        echo "=== Kubeconfig file content (first 10 lines) ==="
        head -10 kubeconfig || echo "Failed to read kubeconfig"

    - name: Deploy to Kubernetes
      run: |
        export KUBECONFIG=kubeconfig
        
        # Debug cluster connectivity
        echo "=== Testing cluster connectivity ==="
        kubectl cluster-info --request-timeout=10s || echo "Cluster info failed"
        kubectl get nodes --request-timeout=10s || echo "Get nodes failed"
        
        # Set Docker image name using GitHub environment variables
        DOCKER_IMAGE_NAME="${{ env.REGISTRY }}/${{ vars.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.ref_name == 'main' && 'latest' || 'develop' }}"
        echo "Using Docker image: $DOCKER_IMAGE_NAME"
        
        # Deploy using the deployment script with environment variable
        export DOCKER_USERNAME="${{ vars.DOCKER_USERNAME }}"
        ./scripts/deploy.sh base ${{ github.ref_name == 'main' && 'latest' || 'develop' }}
        
        # Create namespace if it doesn't exist
        kubectl create namespace simple-bank --dry-run=client -o yaml | kubectl apply --validate=false -f -
        
        # Generate deployment from template
        export DOCKER_IMAGE_NAME
        envsubst < k8s/deployment-template.yaml > k8s/deployment-generated.yaml
        
        # Apply Kubernetes manifests
        kubectl apply --validate=false -f k8s/namespace.yaml
        kubectl apply --validate=false -f k8s/configmap.yaml
        kubectl apply --validate=false -f k8s/secret.yaml
        kubectl apply --validate=false -f k8s/postgres-deployment.yaml
        kubectl apply --validate=false -f k8s/postgres-service.yaml
        kubectl apply --validate=false -f k8s/service.yaml
        kubectl apply --validate=false -f k8s/ingress.yaml
        kubectl apply --validate=false -f k8s/ingress-controller.yaml
        kubectl apply --validate=false -f k8s/deployment-generated.yaml
        
        # Wait for ingress controller to be ready
        echo "Waiting for ingress controller to be ready..."
        kubectl wait --for=condition=available --timeout=300s deployment/ingress-nginx-controller -n ingress-nginx
        
        # Wait for application deployment to be ready
        kubectl rollout status deployment/simple-bank-app -n simple-bank --timeout=300s
        
        # Get service information
        echo "=== Service Information ==="
        kubectl get services -n simple-bank
        echo ""
        echo "=== Ingress Information ==="
        kubectl get ingress -n simple-bank
        echo ""
        echo "=== Node Information ==="
        kubectl get nodes -o wide

    - name: Health check and display access information
      run: |
        export KUBECONFIG=kubeconfig
        
        # Get node IP for reference
        NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
        NODEPORT=$(kubectl get service simple-bank-service -n simple-bank -o jsonpath='{.spec.ports[0].nodePort}')
        
        echo "=== Deployment Information ==="
        echo "‚úÖ Application deployed successfully to minikube"
        echo "‚úÖ Application is accessible via ngrok HTTP tunnel"
        echo ""
        echo "üîß Local Access (for reference):"
        echo "   http://$NODE_IP:$NODEPORT"
        echo ""
        echo "üåê Public Access (via ngrok):"
        echo "   Check your local ngrok dashboard: http://localhost:4040"
        echo "   Use the test script: ./test-ngrok-kubemini.sh"
        echo ""
        
        # Test application health via port forwarding
        echo "Testing application health via port forwarding..."
        kubectl port-forward service/simple-bank-service 8080:8080 -n simple-bank &
        PORT_FORWARD_PID=$!
        
        # Wait for port forward to be ready
        sleep 5
        
        # Test health endpoint
        if curl -f http://localhost:8080/actuator/health; then
          echo "‚úÖ Application health check passed!"
        else
          echo "‚ùå Application health check failed"
        fi
        
        # Clean up port forward
        kill $PORT_FORWARD_PID 2>/dev/null || true
        
        echo ""
        echo "üéâ Deployment successful!"
        echo "üìã Next steps:"
        echo "   1. Keep ngrok running on your local machine"
        echo "   2. Run: ./test-ngrok-kubemini.sh"
        echo "   3. Access your app via the ngrok HTTP URL"
