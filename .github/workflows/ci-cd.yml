name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests
      run: mvn clean test

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: target/surefire-reports/

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: target/site/jacoco/

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl config current-context

    - name: Deploy to Kubernetes
      run: |
        export KUBECONFIG=kubeconfig
        
        # Set Docker image name using GitHub secrets
        DOCKER_IMAGE_NAME="${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/simple-bank:${{ github.ref_name == 'main' && 'stable' || 'develop' }}"
        echo "Using Docker image: $DOCKER_IMAGE_NAME"
        
        # Create namespace if it doesn't exist
        kubectl create namespace simple-bank --dry-run=client -o yaml | kubectl apply -f -
        
        # Generate deployment from template
        export DOCKER_IMAGE_NAME
        envsubst < k8s/deployment-template.yaml > k8s/deployment-generated.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secret.yaml
        kubectl apply -f k8s/postgres-deployment.yaml
        kubectl apply -f k8s/postgres-service.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml
        kubectl apply -f k8s/ingress-controller.yaml
        kubectl apply -f k8s/deployment-generated.yaml
        
        # Wait for ingress controller to be ready
        echo "Waiting for ingress controller to be ready..."
        kubectl wait --for=condition=available --timeout=300s deployment/ingress-nginx-controller -n ingress-nginx
        
        # Wait for application deployment to be ready
        kubectl rollout status deployment/simple-bank-app -n simple-bank --timeout=300s
        
        # Get service information
        echo "=== Service Information ==="
        kubectl get services -n simple-bank
        echo ""
        echo "=== Ingress Information ==="
        kubectl get ingress -n simple-bank
        echo ""
        echo "=== Node Information ==="
        kubectl get nodes -o wide

    - name: Health check and display access information
      run: |
        export KUBECONFIG=kubeconfig
        
        # Get node IP for public access
        NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}')
        if [ -z "$NODE_IP" ]; then
          NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
        fi
        
        # Get NodePort for direct access
        NODEPORT=$(kubectl get service simple-bank-service -n simple-bank -o jsonpath='{.spec.ports[0].nodePort}')
        
        # Get Ingress NodePort
        INGRESS_NODEPORT=$(kubectl get service ingress-nginx-controller -n ingress-nginx -o jsonpath='{.spec.ports[0].nodePort}')
        
        echo "=== Public Access Information ==="
        echo "üåê Direct Application Access (NodePort):"
        echo "   http://$NODE_IP:$NODEPORT"
        echo ""
        echo "üåê Application Access via Ingress:"
        echo "   http://$NODE_IP:$INGRESS_NODEPORT"
        echo ""
        echo "üìã API Endpoints:"
        echo "   Health Check: http://$NODE_IP:$NODEPORT/actuator/health"
        echo "   Swagger UI: http://$NODE_IP:$NODEPORT/swagger-ui/index.html"
        echo "   API Docs: http://$NODE_IP:$NODEPORT/v3/api-docs"
        echo ""
        
        # Wait for the service to be ready
        echo "Waiting for service to be ready..."
        timeout 300 bash -c "until curl -f http://$NODE_IP:$NODEPORT/actuator/health; do sleep 10; done"
        
        echo "‚úÖ Deployment successful!"
        echo "üéâ Your Simple Bank API is now publicly accessible!"
